imports:
    - { resource: parameters.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['php']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments:       ~
    http_method_override: true
    assets: ~

old_sound_rabbit_mq:
    connections:
        default:
            host:     "%rabbit_mq_host%"
            port:     "%rabbit_mq_port%"
            user:     "%rabbit_mq_user%"
            password: "%rabbit_mq_password%"
            vhost:    "%rabbit_mq_vhost%"
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3

    rpc_servers:
       filestorage:
           connection:       default
           exchange_options: {name: 'isz.filestorage', type: topic}
           serializer: json_encode
           qos_options:
               prefetch_size:  0
               prefetch_count: 1
               global:         false
           queue_options:
               name:        isz.filestorage
               durable:     true
               auto_delete: false
               routing_keys: ['isz.filestorage.#']
           callback:         filestorage.consumer

    rpc_clients:
        test:
            connection: default
            unserializer: json_decode